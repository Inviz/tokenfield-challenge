{"version":3,"sources":["App.js","Tokenfield.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","this","props","children","Component","Tokenfield","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","focused","values","suggestions","selected","string","_this2","value","splitValue","pop","list","filter","item","toLowerCase","indexOf","setState","allowNew","_this3","forEach","addValue","refs","input","isMultiple","blur","trim","replace","split","concat","index","slice","splice","name","length","hasOwnProperty","multiple","openSuggestions","closeSuggestions","e","clearValues","preventDefault","pickValue","target","getAttribute","isNaN","parseInt","selectSuggestion","keyCode","chosen","console","log","removeValue","parentNode","_this4","setTimeout","focus","_this5","items","map","key","data-value","tabIndex","onMouseDown","onRemoveValue","bind","data-index","getClassName","data-multiple","undefined","onClear","onExpand","onSuggestionMouseDown","onMouseMove","onSuggestionHover","ref","type","onKeyDown","onInput","onFocus","onBlur","placeholder","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","src_Tokenfield_0","colors","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dc16880.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {this.props.children}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './Tokenfield.css';\n\n// Tokenfield, an input with ability to type.\n// Optionally can have multiple values\n// Optionally can provide list of suggestions\n// Optionally can force only values from a list\nclass Tokenfield extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      focused: false,            // check if input is focused, or force focus\n      values: this.props.values, // list of selected values\n      suggestions: [],           // filtered list of suggestions\n      selected: null             // currently selected suggestion\n    }\n  }\n  static defaultProps = {\n    values: []\n  }\n\n  // show list of suggestions for given string\n  // if tokenfield does not allow custom values, \n  // it will force first matching option to be selected\n  openSuggestions(string) {\n    var value = this.splitValue(string).pop();\n\n    var suggestions = this.props.list \n      .filter ((item) => \n        item.toLowerCase().indexOf(value) === 0\n        && this.state.values.indexOf(item) === -1) \n\n    this.setState({\n      suggestions: suggestions,\n      selected: this.props.allowNew ? null : 0\n    })\n  }\n\n  // add values that are entered into a textfield\n  pickValue(string) {\n    this.splitValue(string)\n      .forEach((value) => \n        this.addValue(value))\n    this.setState({\n      selected: null,\n      suggestions: []\n    })\n    this.refs.input.value = '';\n    if (!this.isMultiple())\n      this.refs.input.blur()\n  }\n\n  // process commas in case comma separated string was pasted into a field\n  splitValue(value) {\n    return value.trim().replace(/\\s\\s*/, ' ').split(/\\s*;,\\s*/)\n  }\n\n  // add single value to the list\n  addValue(value) {\n    if (value && this.state.values.indexOf(value) === -1) {\n      this.setState({\n        values: this.state.values.concat(value)\n      })\n    }\n  }\n\n  // remove all selected values\n  clearValues() {\n    this.setState({\n      values: []\n    })\n  }\n\n  // remove a single value\n  removeValue(value) {\n    var index = this.state.values.indexOf(value);\n    if (index > -1) {\n      var list = this.state.values.slice();\n      list.splice(index, 1)\n      this.setState({\n        values: list\n      })\n    }\n  }\n\n  selectSuggestion(index) {\n    this.setState({selected: index})\n  }\n\n  closeSuggestions(index) {\n    this.setState({selected: null, suggestions: []})\n  }\n\n  // yield list of classes\n  getClassName() {\n    var name = \"Tokenfield\";\n    if (this.state.focused)\n      name += ' focused'\n    if (this.state.values.length)\n      name += ' filled'\n    return name\n  }\n\n  // check if multiple values are allowed\n  isMultiple() {\n    return this.props.hasOwnProperty('multiple') && this.props.multiple !== false\n  }\n\n  // show list of suggestions on focus, \n  // but only if custom values arent allowed\n  onFocus() {\n    if (this.props.list && !this.props.allowNew)\n      this.openSuggestions(\"\")\n    this.setState({focused: true})\n  }\n\n  // hide list of suggestions\n  onBlur() {\n    this.closeSuggestions()\n    this.setState({focused: false})\n  }\n\n  // Handle clear button press\n  onClear(e) {\n    this.clearValues();\n    this.setState({focused: true})\n    e.preventDefault();\n  }\n\n  // toggle suggestion list\n  onExpand(e) {\n    if (this.state.suggestions.length)\n      this.closeSuggestions()\n    else\n      this.openSuggestions(\"\")\n    e.preventDefault();\n  }\n\n  // focus input on click\n  onMouseDown(e) {\n    this.setState({focused: true})\n    e.preventDefault()\n  }\n\n  // pick hovered suggestion on mouse click\n  onSuggestionMouseDown(e) {\n    this.pickValue(e.target.getAttribute('data-value'));\n    e.preventDefault()\n  }\n\n  // hover suggestion\n  onSuggestionHover(e) {\n    var index = e.target.getAttribute('data-index');\n    if (index != null && !isNaN(parseInt(index)))\n      this.selectSuggestion(parseInt(index))\n  }\n\n  onKeyDown(e) {  \n    // add values\n    if (e.keyCode === 13  //enter\n      || e.keyCode === 188 //,\n      || e.keyCode === 186 //;\n    ) {\n      var chosen = this.state.selected != null\n                    ? this.state.suggestions[this.state.selected] \n                    : this.props.allowNew \n                      ? e.target.value \n                      : null\n\n                  console.log(chosen, this.props)\n      if (chosen != null)\n        this.pickValue(chosen)\n      e.preventDefault()\n    // scroll suggestions\n    } else if (e.keyCode === 38) {//up \n      if (this.state.suggestions.length) \n        this.selectSuggestion(\n          this.state.selected === null \n            ? this.state.suggestions.length - 1 \n            : (this.state.selected || this.state.suggestions.length) - 1\n        )\n      e.preventDefault()\n    } else if (e.keyCode === 40) { //down\n      if (this.state.suggestions.length)\n        this.selectSuggestion(\n          this.state.selected === null \n            ? 0\n            : (this.state.selected + 1) % this.state.suggestions.length\n        )\n      else if (this.props.list.length)\n        this.openSuggestions(\"\")\n      e.preventDefault()\n    // close suggestions\n    } else if (e.keyCode === 27) { //esc\n      this.closeSuggestions()\n      e.preventDefault()\n    // pop last value\n    } else if (e.keyCode == 8) { // backspace\n      if (this.refs.input.value.length == 0) {\n        var values = this.state.values.slice()\n        values.pop()\n        this.setState({values: values})\n        e.preventDefault()\n      }\n    }\n  }\n\n  // update suggestions on input\n  onInput(e) {\n    if (this.props.list)\n      this.openSuggestions(e.target.value)\n  }\n\n  // handle removal of a single value\n  onRemoveValue(e) {\n    this.removeValue(e.target.parentNode.getAttribute('data-value'));\n    this.setState({focused: true})\n  }\n\n  // refocus input \n  componentDidUpdate () {\n    // YF: setTimeout isn't good for this, \n    // but i couldnt quickly figure out at which point \n    // i use it to refocus input after deleting previous value\n    if (this.state.focused) {\n      setTimeout(() => {\n        this.refs.input.focus();\n      }, 10)\n    }\n  }\n\n  render() {\n    // render values\n    var items = this.state.values.map((value) =>\n      <li key={\"value-\" + value} data-value={value}>\n        <button className=\"remove\" \n                tabIndex=\"-1\"\n                onMouseDown={this.onRemoveValue.bind(this)}>\n          Delete\n        </button>\n        {value}\n      </li>\n    );\n    // render suggestions\n    var suggestions = this.state.suggestions.map((value, index) =>\n      <li key={\"suggestion-\" + value} \n          className={this.state.selected === index ? 'selected' : null}\n          data-value={value}\n          data-index={index}>{value}\n      </li>\n    );\n    return (\n      <div className={this.getClassName()} \n           data-multiple={this.isMultiple() || undefined} \n           onMouseDown={this.onMouseDown.bind(this)}>\n        <div className=\"buttons\">\n          {this.state.values.length ? <button tabIndex=\"-1\" className=\"clear\" onMouseDown={this.onClear.bind(this)}>Clear</button> : null}\n          {this.props.list ? <button tabIndex=\"-1\" className=\"expand\" onMouseDown={this.onExpand.bind(this)}>Expand</button> : null}\n        </div>\n        <ul className=\"suggestions\"\n          onMouseDown={this.onSuggestionMouseDown.bind(this)}\n          onMouseMove={this.onSuggestionHover.bind(this)}>\n          {suggestions}\n        </ul>\n        <ul className=\"values\">\n          {items}\n        </ul>\n        <input ref=\"input\"  type=\"text\" \n          onKeyDown={this.onKeyDown.bind(this)} \n          onInput={this.onInput.bind(this)} \n          onFocus={this.onFocus.bind(this)} \n          onBlur={this.onBlur.bind(this)} \n          placeholder={this.props.placeholder} />\n      </div>\n    );\n  }\n}\n\nexport default Tokenfield;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Tokenfield from './Tokenfield';\nimport * as serviceWorker from './serviceWorker';\n\nimport colors from './colors.json'\n\n\nReactDOM.render(<App>\n\t<p>Will not allow that are not in the list:</p>\n\t<Tokenfield placeholder=\"Select multiple from a list...\"  multiple list={colors}/>\n\t<Tokenfield placeholder=\"Select one from a list...\" list={colors}/>\n\t<p>Will allow new values that are not in the list:</p>\n\t<Tokenfield placeholder=\"Type or select multiple from a list...\"  multiple list={colors} allowNew/>\n\t<Tokenfield placeholder=\"Type or select one from a list...\" list={colors} allowNew/>\n\t<p>Does not have a list:</p>\n\t<Tokenfield placeholder=\"Type multiple...\"  multiple allowNew/>\n\t<Tokenfield placeholder=\"Type one...\" allowNew />\n</App>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}