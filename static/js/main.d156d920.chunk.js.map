{"version":3,"sources":["App.js","Tokenfield.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","this","props","children","Component","Tokenfield","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","values","concat","value","options","getOptions","state","focused","suggestions","selected","string","_this2","splitValue","pop","filter","option","name","toLowerCase","indexOf","setState","allowNew","i","length","Array","isArray","forEach","push","property","_this3","addValue","refs","input","trim","replace","split","setValue","index","list","slice","splice","blur","hasOwnProperty","multiple","onChange","isMultiple","openSuggestions","focus","closeSuggestions","e","clearValues","preventDefault","pickValue","target","getAttribute","stopPropagation","isNaN","parseInt","selectSuggestion","keyCode","chosen","removeValue","parentNode","_this4","setTimeout","_this5","items","map","getOptionName","undefined","key","data-value","data-name","tabIndex","onMouseDown","onRemoveValue","bind","type","data-index","showClear","showDropdown","getClassName","ref","data-multiple","onClear","onExpand","onSuggestionMouseDown","onMouseMove","onSuggestionHover","onKeyDown","onInput","onFocus","onBlur","placeholder","defaultProps","Boolean","window","location","hostname","match","wrapper","classList","add","serialize","remove","inputs","document","querySelectorAll","encodeURIComponent","getElementById","innerHTML","ReactDOM","render","src_App_0","src_Tokenfield_0","colorsArray","colorsObject","id","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4/MAeeA,0LAVX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACfC,KAAKC,MAAMC,kBALJC,cCIZC,qBACJ,SAAAA,EAAYH,GAAO,IAAAI,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAI,GACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAV,KAAMC,IACN,IAAIU,EAAS,GAAGC,OAAOP,EAAKJ,MAAMU,QAAU,IAC5BC,OAAOP,EAAKJ,MAAMY,OAAS,IACvCC,EAAUT,EAAKU,WAAWV,EAAKJ,MAAMa,SAJxB,OAKjBT,EAAKW,MAAQ,CACXC,SAAS,EACTN,OAAQA,EACRG,QAASA,EACTI,YAAa,GACbC,SAAU,MAVKd,+EAoBHe,GAAQ,IAAAC,EAAArB,KAClBa,EAAQb,KAAKsB,WAAWF,GAAQG,MAEhCL,EAAclB,KAAKgB,MAAMF,QAC1BU,OAAQ,SAACC,GAAD,OACsC,IAA7CA,EAAOC,KAAKC,cAAcC,QAAQf,KACc,IAA7CQ,EAAKL,MAAML,OAAOiB,QAAQH,EAAOZ,SAExCb,KAAK6B,SAAS,CACZX,YAAaA,EACbC,SAAUnB,KAAKC,MAAM6B,SAAW,KAAO,0CAK7BL,GACZ,GAAIzB,KAAKgB,MAAMF,QACb,IAAK,IAAIiB,EAAI,EAAGA,EAAI/B,KAAKgB,MAAMF,QAAQkB,OAAQD,IAC7C,GAAI/B,KAAKgB,MAAMF,QAAQiB,GAAGlB,QAAUY,EAClC,OAAOzB,KAAKgB,MAAMF,QAAQiB,GAAGL,0CAUnC,IAAIZ,EAAU,GACd,GAAId,KAAKC,MAAMa,QACb,GAAImB,MAAMC,QAAQlC,KAAKC,MAAMa,SAC3Bd,KAAKC,MAAMa,QAAQqB,QAAQ,SAASV,GAC9BQ,MAAMC,QAAQT,GAChBX,EAAQsB,KAAK,CAACvB,MAAOY,EAAO,GAAIC,KAAMD,EAAO,KAE7CX,EAAQsB,KAAK,CAACvB,MAAOY,EAAQC,KAAMD,WAGvC,IAAK,IAAIY,KAAYrC,KAAKC,MAAMa,QACa,iBAAhCd,KAAKC,MAAMa,QAAQuB,GAC5BvB,EAAQsB,KAAKpC,KAAKC,MAAMa,QAAQuB,IAEhCvB,EAAQsB,KAAK,CAACV,KAAM1B,KAAKC,MAAMa,QAAQuB,GAAWxB,MAAOwB,IAKjE,GAAIvB,EAAQkB,OACV,OAAOlB,oCAIDM,GAAQ,IAAAkB,EAAAtC,KAEhBA,KAAKsB,WAAWF,GACbe,QAAQ,SAACtB,GAAD,OACPyB,EAAKC,SAAS1B,KAClBb,KAAK6B,SAAS,CACZV,SAAU,KACVD,YAAa,KAEflB,KAAKwC,KAAKC,MAAM5B,MAAQ,sCAIfA,GACT,OAAOA,EAAM6B,OAAOC,QAAQ,QAAS,KAAKC,MAAM,6CAIzC/B,GACHA,IAA+C,IAAtCb,KAAKgB,MAAML,OAAOiB,QAAQf,IACrCb,KAAK6C,SAAS7C,KAAKgB,MAAML,OAAOC,OAAOC,0CAMzCb,KAAK6C,SAAS,wCAIJhC,GACV,IAAIiC,EAAQ9C,KAAKgB,MAAML,OAAOiB,QAAQf,GACtC,GAAIiC,GAAS,EAAG,CACd,IAAIC,EAAO/C,KAAKgB,MAAML,OAAOqC,QAC7BD,EAAKE,OAAOH,EAAO,GACnB9C,KAAK6C,SAASE,6CAIDD,GACf9C,KAAK6B,SAAS,CAACV,SAAU2B,6CAGVA,GACf9C,KAAK6B,SAAS,CAACV,SAAU,KAAMD,YAAa,qCAI5ClB,KAAK6B,SAAS,CAACZ,SAAS,mCAKxBjB,KAAK6B,SAAS,CAACZ,SAAS,IACxBjB,KAAKwC,KAAKC,MAAMS,8CAKhB,IAAIxB,EAAO,aAKX,OAJI1B,KAAKgB,MAAMC,UACbS,GAAQ,YACN1B,KAAKgB,MAAML,OAAOqB,SACpBN,GAAQ,WACHA,uCAKP,OAAO1B,KAAKC,MAAMkD,eAAe,cAAuC,IAAxBnD,KAAKC,MAAMmD,0CAGpDzC,GACPX,KAAK6B,SAAS,CAAClB,OAAQA,IACnBX,KAAKC,MAAMoD,UACbrD,KAAKC,MAAMoD,SAAS3C,KAAKV,KAAMW,EAAQX,OACpCA,KAAKsD,cAAgB3C,EAAOqB,QAC/BhC,KAAKkD,yCAMHlD,KAAKgB,MAAMF,UAAYd,KAAKC,MAAM6B,UACpC9B,KAAKuD,gBAAgB,IACvBvD,KAAKwD,yCAKLxD,KAAKyD,mBACLzD,KAAKkD,uCAICQ,GACN1D,KAAK2D,cACL3D,KAAKwD,QACLE,EAAEE,kDAIKF,GACH1D,KAAKgB,MAAME,YAAYc,OACzBhC,KAAKyD,mBAELzD,KAAKuD,gBAAgB,IACvBG,EAAEE,qDAIQF,IACN1D,KAAKsD,cAAiBtD,KAAKgB,MAAML,OAAOqB,QAC1ChC,KAAKwD,QACPE,EAAEE,+DAIkBF,GACpB1D,KAAK6D,UAAUH,EAAEI,OAAOC,aAAa,eACrCL,EAAEE,iBACFF,EAAEM,4DAIcN,GAChB,IAAIZ,EAAQY,EAAEI,OAAOC,aAAa,cACrB,MAATjB,GAAkBmB,MAAMC,SAASpB,KACnC9C,KAAKmE,iBAAiBD,SAASpB,sCAGzBY,GAER,GAAkB,KAAdA,EAAEU,SACa,MAAdV,EAAEU,SACY,MAAdV,EAAEU,QACL,CACA,IAAIC,EAAgC,MAAvBrE,KAAKgB,MAAMG,SACRnB,KAAKgB,MAAME,YAAYlB,KAAKgB,MAAMG,UAAUN,MAC5Cb,KAAKC,MAAM6B,SACT4B,EAAEI,OAAOjD,MACT,KACJ,MAAVwD,GACFrE,KAAK6D,UAAUQ,GACjBX,EAAEE,sBAEG,GAAkB,KAAdF,EAAEU,QACPpE,KAAKgB,MAAME,YAAYc,QACzBhC,KAAKmE,iBACqB,OAAxBnE,KAAKgB,MAAMG,SACPnB,KAAKgB,MAAME,YAAYc,OAAS,GAC/BhC,KAAKgB,MAAMG,UAAYnB,KAAKgB,MAAME,YAAYc,QAAU,GAEjE0B,EAAEE,sBACG,GAAkB,KAAdF,EAAEU,QACPpE,KAAKgB,MAAME,YAAYc,OACzBhC,KAAKmE,iBACqB,OAAxBnE,KAAKgB,MAAMG,SACP,GACCnB,KAAKgB,MAAMG,SAAW,GAAKnB,KAAKgB,MAAME,YAAYc,QAElDhC,KAAKgB,MAAMF,SAClBd,KAAKuD,gBAAgB,IACvBG,EAAEE,sBAEG,GAAkB,KAAdF,EAAEU,QACXpE,KAAKyD,mBACLC,EAAEE,sBAEG,GAAiB,GAAbF,EAAEU,SACyB,GAAhCpE,KAAKwC,KAAKC,MAAM5B,MAAMmB,OAAa,CACrC,IAAIrB,EAASX,KAAKgB,MAAML,OAAOqC,QAC/BrC,EAAOY,MACPvB,KAAK6C,SAASlC,GACd+C,EAAEE,kDAMAF,GACF1D,KAAKgB,MAAMF,SACbd,KAAKuD,gBAAgBG,EAAEI,OAAOjD,6CAIpB6C,GACZ1D,KAAKsE,YAAYZ,EAAEI,OAAOS,WAAWR,aAAa,eAClD/D,KAAKwD,qDAIe,IAAAgB,EAAAxE,KAIhBA,KAAKgB,MAAMC,SACbwD,WAAW,WACTD,EAAKhC,KAAKC,MAAMe,SACf,qCAIE,IAAAkB,EAAA1E,KAEH2E,EAAQ3E,KAAKgB,MAAML,OAAOiE,IAAI,SAAC/D,GACjC,IAAIa,EAAOgD,EAAKG,cAAchE,GAG9B,YAFaiE,IAATpD,IACFA,EAAOb,GACFjB,EAAAC,EAAAC,cAAA,MAAIiF,IAAK,SAAWlE,EACtBmE,aAAYnE,EACZoE,YAAWvD,GACd9B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SACVmF,SAAS,KACTC,YAAaT,EAAKU,cAAcC,KAAKX,IAF7C,UAKA9E,EAAAC,EAAAC,cAAA,SAAOwF,KAAK,SAAS5D,KAAMgD,EAAKzE,MAAMyB,KAAMb,MAAOA,IAClDa,KAIDR,EAAclB,KAAKgB,MAAME,YAAY0D,IAAI,SAACnD,EAAQqB,GAAT,OAC3ClD,EAAAC,EAAAC,cAAA,MAAIiF,IAAK,cAAgBtD,EAAOZ,MAC5Bd,UAAW2E,EAAK1D,MAAMG,WAAa2B,EAAQ,WAAa,KACxDkC,aAAYvD,EAAOZ,MACnBoE,YAAWxD,EAAOC,KAClB6D,aAAYzC,GAAQrB,EAAOC,QAG7B8D,EAAYxF,KAAKgB,MAAML,OAAOqB,OAC9ByD,EAAezF,KAAKgB,MAAMF,UAAYd,KAAKsD,eAAiBtD,KAAKgB,MAAML,OAAOqB,QAClF,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,KAAK0F,eAChBC,IAAI,UACJC,gBAAe5F,KAAKsD,mBAAgBwB,EACpCK,YAAanF,KAAKmF,YAAYE,KAAKrF,OACtCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZyF,EAAY5F,EAAAC,EAAAC,cAAA,UAAQoF,SAAS,KAAKnF,UAAU,QAAQoF,YAAanF,KAAK6F,QAAQR,KAAKrF,OAAvE,SAA+F,KAC3GyF,EAAe7F,EAAAC,EAAAC,cAAA,UAAQoF,SAAS,KAAKnF,UAAU,SAASoF,YAAanF,KAAK8F,SAAST,KAAKrF,OAAzE,UAAkG,MAEpHJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZoF,YAAanF,KAAK+F,sBAAsBV,KAAKrF,MAC7CgG,YAAahG,KAAKiG,kBAAkBZ,KAAKrF,OACxCkB,GAEHtB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACX4E,GAEH/E,EAAAC,EAAAC,cAAA,SAAO6F,IAAI,QAASL,KAAK,OACvBY,UAAWlG,KAAKkG,UAAUb,KAAKrF,MAC/BmG,QAASnG,KAAKmG,QAAQd,KAAKrF,MAC3BoG,QAASpG,KAAKoG,QAAQf,KAAKrF,MAC3BqG,OAAQrG,KAAKqG,OAAOhB,KAAKrF,MACzBsG,YAAatG,KAAKC,MAAMqG,sBAxUTnG,cAAnBC,EAcGmG,aAAe,CACpB5F,OAAQ,IA+TGP,QCzUKoG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6ECPFvD,EAAW,SAAS1C,EAAQ8B,GAAO,IAAApC,EAAAL,KACtCyE,WAAW,WACVpE,EAAKmC,KAAKqE,QAAQC,UAAUC,IAAI,WAChCC,KACE,IACHvC,WAAW,WACVpE,EAAKmC,KAAKqE,QAAQC,UAAUG,OAAO,YACjC,MAEAD,EAAY,WAGf,IAFA,IAAIE,EAASC,SAASC,iBAAiB,wBACnCzG,EAAS,aACJoB,EAAI,EAAGA,EAAImF,EAAOlF,OAAQD,IAC9BpB,IACHA,GAAU,MACXA,GAAUuG,EAAOnF,GAAGgC,aAAa,QAAU,IAAMsD,mBAAmBH,EAAOnF,GAAGgC,aAAa,UAE5FoD,SAASG,eAAe,UAAUC,UAAY5G,GAE/C6G,IAASC,OAAO7H,EAAAC,EAAAC,cAAC4H,EAAD,KACf9H,EAAAC,EAAAC,cAAA,4DACAF,EAAAC,EAAAC,cAAC6H,EAAD,CAAYjG,KAAK,YAAY4E,YAAY,iCAAkClD,UAAQ,EAACtC,QAAS8G,EAAavE,SAAUA,IACpHzD,EAAAC,EAAAC,cAAC6H,EAAD,CAAYjG,KAAK,UAAU4E,YAAY,4BAA4BxF,QAAS8G,EAAavE,SAAUA,IACnGzD,EAAAC,EAAAC,cAAA,4DACAF,EAAAC,EAAAC,cAAC6H,EAAD,CAAYjG,KAAK,YAAY4E,YAAY,yCAA0ClD,UAAQ,EAACtC,QAAS+G,EAAc/F,UAAQ,EAACuB,SAAUA,IACtIzD,EAAAC,EAAAC,cAAC6H,EAAD,CAAYjG,KAAK,UAAU4E,YAAY,oCAAoCxF,QAAS+G,EAAc/F,UAAQ,EAACuB,SAAUA,IACrHzD,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAC6H,EAAD,CAAYjG,KAAK,YAAY4E,YAAY,mBAAoBlD,UAAQ,EAACtB,UAAQ,EAACuB,SAAUA,IACzFzD,EAAAC,EAAAC,cAAC6H,EAAD,CAAYjG,KAAK,UAAU4E,YAAY,cAAcxE,UAAQ,EAACuB,SAAUA,IACxEzD,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAC6H,EAAD,CAAYjG,KAAK,YAAY4E,YAAY,mBAAmB3F,OAAQ,CAAC,MAAO,QAAUyC,UAAQ,EAACtB,UAAQ,EAACuB,SAAUA,IAClHzD,EAAAC,EAAAC,cAAC6H,EAAD,CAAYjG,KAAK,UAAU4E,YAAY,cAAczF,MAAM,MAAMiB,UAAQ,EAACuB,SAAUA,IACpFzD,EAAAC,EAAAC,cAAA,OAAKgI,GAAG,YACDX,SAASG,eAAe,SAEhCN,IDmFM,kBAAmBe,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d156d920.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {this.props.children}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './Tokenfield.css';\n\n// Tokenfield, an input with ability to type.\n// Optionally can have multiple values\n// Optionally can provide list of suggestions\n// Optionally can force only values from a list\nclass Tokenfield extends Component {\n  constructor(props) {\n    super(props)\n    var values = [].concat(this.props.values || [])\n                   .concat(this.props.value || [])\n    var options = this.getOptions(this.props.options);\n    this.state = {\n      focused: false,  // check if input is focused, or force focus\n      values: values,  // list of selected values\n      options: options,// list of options\n      suggestions: [], // filtered list of suggestions\n      selected: null   // currently selected suggestion\n    }\n  }\n  static defaultProps = {\n    values: []\n  }\n\n  // show list of suggestions for given string\n  // if tokenfield does not allow custom values, \n  // it will force first matching option to be selected\n  openSuggestions(string) {\n    var value = this.splitValue(string).pop();\n\n    var suggestions = this.state.options \n      .filter ((option) => \n        option.name.toLowerCase().indexOf(value) === 0\n        && this.state.values.indexOf(option.value) === -1) \n\n    this.setState({\n      suggestions: suggestions,\n      selected: this.props.allowNew ? null : 0\n    })\n  }\n\n  // Find option name by value\n  getOptionName(option) {\n    if (this.state.options) {\n      for (var i = 0; i < this.state.options.length; i++)\n        if (this.state.options[i].value === option)\n          return this.state.options[i].name\n    }\n  }\n\n  // normalize options in different formats:\n  //   {value: \"Label\", ...}\n  //   [\"value\", ...]\n  //   [[\"value\", \"label\"], ...]\n  //   [{\"name\": \"label\", value: \"value\"]}, ...]\n  getOptions() {\n    var options = [];\n    if (this.props.options) {\n      if (Array.isArray(this.props.options)) {\n        this.props.options.forEach(function(option) {\n          if (Array.isArray(option))\n            options.push({value: option[0], name: option[1]})\n          else\n            options.push({value: option, name: option})\n        })\n      } else {\n        for (var property in this.props.options) {\n          if (typeof this.props.options[property] == 'object') {\n            options.push(this.props.options[property])\n          } else {\n            options.push({name: this.props.options[property], value: property})\n          }\n        }\n      }\n    }\n    if (options.length)\n      return options;\n  }\n\n  // add values that are entered into a textfield\n  pickValue(string) {\n    debugger\n    this.splitValue(string)\n      .forEach((value) => \n        this.addValue(value))\n    this.setState({\n      selected: null,\n      suggestions: []\n    })\n    this.refs.input.value = '';\n  }\n\n  // process commas in case comma separated string was pasted into a field\n  splitValue(value) {\n    return value.trim().replace(/\\s\\s*/, ' ').split(/\\s*;,\\s*/)\n  }\n\n  // add single value to the list\n  addValue(value) {\n    if (value && this.state.values.indexOf(value) === -1) {\n      this.setValue(this.state.values.concat(value))\n    }\n  }\n\n  // remove all selected values\n  clearValues() {\n    this.setValue([])\n  }\n\n  // remove a single value\n  removeValue(value) {\n    var index = this.state.values.indexOf(value);\n    if (index > -1) {\n      var list = this.state.values.slice();\n      list.splice(index, 1)\n      this.setValue(list)\n    }\n  }\n\n  selectSuggestion(index) {\n    this.setState({selected: index})\n  }\n\n  closeSuggestions(index) {\n    this.setState({selected: null, suggestions: []})\n  }\n\n  focus() {\n    this.setState({focused: true})\n  }\n\n\n  blur() {\n    this.setState({focused: false})\n    this.refs.input.blur()\n  }\n\n  // yield list of classes\n  getClassName() {\n    var name = \"Tokenfield\";\n    if (this.state.focused)\n      name += ' focused'\n    if (this.state.values.length)\n      name += ' filled'\n    return name\n  }\n\n  // check if multiple values are allowed\n  isMultiple() {\n    return this.props.hasOwnProperty('multiple') && this.props.multiple !== false\n  }\n\n  setValue(values) {\n    this.setState({values: values})\n    if (this.props.onChange)\n      this.props.onChange.call(this, values, this)\n    if (!this.isMultiple() && values.length)\n      this.blur()\n  }\n\n  // show list of suggestions on focus, \n  // but only if custom values arent allowed\n  onFocus() {\n    if (this.state.options && !this.props.allowNew)\n      this.openSuggestions(\"\")\n    this.focus()\n  }\n\n  // hide list of suggestions\n  onBlur() {\n    this.closeSuggestions()\n    this.blur()\n  }\n\n  // Handle clear button press\n  onClear(e) {\n    this.clearValues();\n    this.focus()\n    e.preventDefault();\n  }\n\n  // toggle suggestion list\n  onExpand(e) {\n    if (this.state.suggestions.length)\n      this.closeSuggestions()\n    else\n      this.openSuggestions(\"\")\n    e.preventDefault();\n  }\n\n  // focus input on click\n  onMouseDown(e) {\n    if (this.isMultiple() || !this.state.values.length)\n      this.focus()\n    e.preventDefault()\n  }\n\n  // pick hovered suggestion on mouse click\n  onSuggestionMouseDown(e) {\n    this.pickValue(e.target.getAttribute('data-value'));\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  // hover suggestion\n  onSuggestionHover(e) {\n    var index = e.target.getAttribute('data-index');\n    if (index != null && !isNaN(parseInt(index)))\n      this.selectSuggestion(parseInt(index))\n  }\n\n  onKeyDown(e) {  \n    // add values\n    if (e.keyCode === 13  //enter\n      || e.keyCode === 188 //,\n      || e.keyCode === 186 //;\n    ) {\n      var chosen = this.state.selected != null\n                    ? this.state.suggestions[this.state.selected].value \n                    : this.props.allowNew \n                      ? e.target.value \n                      : null\n      if (chosen != null)\n        this.pickValue(chosen)\n      e.preventDefault()\n    // scroll suggestions\n    } else if (e.keyCode === 38) {//up \n      if (this.state.suggestions.length) \n        this.selectSuggestion(\n          this.state.selected === null \n            ? this.state.suggestions.length - 1 \n            : (this.state.selected || this.state.suggestions.length) - 1\n        )\n      e.preventDefault()\n    } else if (e.keyCode === 40) { //down\n      if (this.state.suggestions.length)\n        this.selectSuggestion(\n          this.state.selected === null \n            ? 0\n            : (this.state.selected + 1) % this.state.suggestions.length\n        )\n      else if (this.state.options)\n        this.openSuggestions(\"\")\n      e.preventDefault()\n    // close suggestions\n    } else if (e.keyCode === 27) { //esc\n      this.closeSuggestions()\n      e.preventDefault()\n    // pop last value\n    } else if (e.keyCode == 8) { // backspace\n      if (this.refs.input.value.length == 0) {\n        var values = this.state.values.slice()\n        values.pop()\n        this.setValue(values);\n        e.preventDefault()\n      }\n    }\n  }\n\n  // update suggestions on input\n  onInput(e) {\n    if (this.state.options)\n      this.openSuggestions(e.target.value)\n  }\n\n  // handle removal of a single value\n  onRemoveValue(e) {\n    this.removeValue(e.target.parentNode.getAttribute('data-value'));\n    this.focus()\n  }\n\n  // refocus input \n  componentDidUpdate () {\n    // YF: setTimeout isn't good for this, \n    // but i couldnt quickly figure out at which point \n    // i use it to refocus input after deleting previous value\n    if (this.state.focused) {\n      setTimeout(() => {\n        this.refs.input.focus();\n      }, 10)\n    }\n  }\n\n  render() {\n    // render values\n    var items = this.state.values.map((value) => {\n      var name = this.getOptionName(value);\n      if (name === undefined)\n        name = value;\n      return <li key={\"value-\" + value} \n           data-value={value} \n           data-name={name}>\n        <button className=\"remove\" \n                tabIndex=\"-1\"\n                onMouseDown={this.onRemoveValue.bind(this)}>\n          Delete\n        </button>\n        <input type=\"hidden\" name={this.props.name} value={value} />\n        {name}\n      </li>\n    });\n    // render suggestions\n    var suggestions = this.state.suggestions.map((option, index) =>\n      <li key={\"suggestion-\" + option.value} \n          className={this.state.selected === index ? 'selected' : null}\n          data-value={option.value}\n          data-name={option.name}\n          data-index={index}>{option.name}\n      </li>\n    );\n    var showClear = this.state.values.length;\n    var showDropdown = this.state.options && (this.isMultiple() || !this.state.values.length);\n    return (\n      <div className={this.getClassName()}\n           ref=\"wrapper\"\n           data-multiple={this.isMultiple() || undefined} \n           onMouseDown={this.onMouseDown.bind(this)}>\n        <div className=\"buttons\">\n          {showClear ? <button tabIndex=\"-1\" className=\"clear\" onMouseDown={this.onClear.bind(this)}>Clear</button> : null}\n          {showDropdown ? <button tabIndex=\"-1\" className=\"expand\" onMouseDown={this.onExpand.bind(this)}>Expand</button> : null}\n        </div>\n        <ul className=\"suggestions\"\n          onMouseDown={this.onSuggestionMouseDown.bind(this)}\n          onMouseMove={this.onSuggestionHover.bind(this)}>\n          {suggestions}\n        </ul>\n        <ul className=\"values\">\n          {items}\n        </ul>\n        <input ref=\"input\"  type=\"text\" \n          onKeyDown={this.onKeyDown.bind(this)} \n          onInput={this.onInput.bind(this)} \n          onFocus={this.onFocus.bind(this)} \n          onBlur={this.onBlur.bind(this)} \n          placeholder={this.props.placeholder} />\n      </div>\n    );\n  }\n}\n\nexport default Tokenfield;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Tokenfield from './Tokenfield';\nimport * as serviceWorker from './serviceWorker';\n\nimport colorsArray from './colors_array.json'\nimport colorsObject from './colors_object.json'\n\n\nvar onChange = function(values, input) {\n\tsetTimeout(() => {\n\t\tthis.refs.wrapper.classList.add('changed')\n\t\tserialize()\n\t}, 50)\n\tsetTimeout(() => {\n\t\tthis.refs.wrapper.classList.remove('changed')\n\t}, 300)\n}\nvar serialize = function() {\n\tvar inputs = document.querySelectorAll('input[type=\"hidden\"]');\n\tvar values = 'Form data:'\n\tfor (var i = 0; i < inputs.length; i++) {\n\t\tif (values)\n\t\t\tvalues += '\\n'\n\t\tvalues += inputs[i].getAttribute('name') + '=' + encodeURIComponent(inputs[i].getAttribute('value'))\n\t}\n\tdocument.getElementById('output').innerHTML = values;\n}\nReactDOM.render(<App>\n\t<p>Will not allow values that are not in the list:</p>\n\t<Tokenfield name=\"select1[]\" placeholder=\"Select multiple from a list...\"  multiple options={colorsArray} onChange={onChange}/>\n\t<Tokenfield name=\"select2\" placeholder=\"Select one from a list...\" options={colorsArray} onChange={onChange}/>\n\t<p>Will allow new values that are not in the list:</p>\n\t<Tokenfield name=\"select3[]\" placeholder=\"Type or select multiple from a list...\"  multiple options={colorsObject} allowNew onChange={onChange}/>\n\t<Tokenfield name=\"select4\" placeholder=\"Type or select one from a list...\" options={colorsObject} allowNew onChange={onChange}/>\n\t<p>Does not have a list:</p>\n\t<Tokenfield name=\"select5[]\" placeholder=\"Type multiple...\"  multiple allowNew onChange={onChange}/>\n\t<Tokenfield name=\"select6\" placeholder=\"Type one...\" allowNew onChange={onChange} />\n\t<p>Preset values:</p>\n\t<Tokenfield name=\"select7[]\" placeholder=\"Type multiple...\" values={[\"Red\", \"Blue\"]}  multiple allowNew onChange={onChange}/>\n\t<Tokenfield name=\"select8\" placeholder=\"Type one...\" value=\"Red\" allowNew onChange={onChange} />\n\t<pre id=\"output\"></pre>\n</App>, document.getElementById('root'));\n\nserialize()\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}